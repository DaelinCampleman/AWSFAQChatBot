{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { DeleteSessionCommand } from \"./commands/DeleteSessionCommand\";\nimport { GetSessionCommand } from \"./commands/GetSessionCommand\";\nimport { PutSessionCommand } from \"./commands/PutSessionCommand\";\nimport { RecognizeTextCommand } from \"./commands/RecognizeTextCommand\";\nimport { RecognizeUtteranceCommand } from \"./commands/RecognizeUtteranceCommand\";\nimport { StartConversationCommand } from \"./commands/StartConversationCommand\";\nimport { LexRuntimeV2Client } from \"./LexRuntimeV2Client\";\n\nvar LexRuntimeV2 = function (_super) {\n  __extends(LexRuntimeV2, _super);\n\n  function LexRuntimeV2() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  LexRuntimeV2.prototype.deleteSession = function (args, optionsOrCb, cb) {\n    var command = new DeleteSessionCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \".concat(typeof optionsOrCb));\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  LexRuntimeV2.prototype.getSession = function (args, optionsOrCb, cb) {\n    var command = new GetSessionCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \".concat(typeof optionsOrCb));\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  LexRuntimeV2.prototype.putSession = function (args, optionsOrCb, cb) {\n    var command = new PutSessionCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \".concat(typeof optionsOrCb));\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  LexRuntimeV2.prototype.recognizeText = function (args, optionsOrCb, cb) {\n    var command = new RecognizeTextCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \".concat(typeof optionsOrCb));\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  LexRuntimeV2.prototype.recognizeUtterance = function (args, optionsOrCb, cb) {\n    var command = new RecognizeUtteranceCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \".concat(typeof optionsOrCb));\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  LexRuntimeV2.prototype.startConversation = function (args, optionsOrCb, cb) {\n    var command = new StartConversationCommand(args);\n\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \".concat(typeof optionsOrCb));\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n\n  return LexRuntimeV2;\n}(LexRuntimeV2Client);\n\nexport { LexRuntimeV2 };","map":null,"metadata":{},"sourceType":"module"}